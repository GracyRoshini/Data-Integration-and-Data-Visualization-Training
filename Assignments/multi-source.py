import pandas as pd
import sqlite3

df_excel=pd.read_excel("data_excel.xlsx")

df_csv=pd.read_csv("data_csv.csv")

df_json=pd.read_json("data_json.json")

conn=sqlite3.connect("data_orders.sqlite")
df_sql=pd.read_sql_query("SELECT * FROM WarehouseOrders",conn)

# print(f"\n Data from Excel {df_excel.shape[0]}")  #returns no.of.rows
# print(f"\n Data from csv {df_csv.shape[0]}")
# print(f"\n Data from Json {df_json.shape[0]}")
# print(f"\n Data from sqllite {df_sql.shape[0]}")


# print("------------------------------------Colns Before rename--------------------------------------")
# print(df_csv)
# print("---------------------------------------------------------")
# print(df_excel)
# print("---------------------------------------------------------")
# print(df_json)
# print("---------------------------------------------------------")
# print(df_sql)
# print("---------------------------------------------------------")


df_csv = df_csv.rename(columns={
    "ID": "OrderID",
    "Name": "Customer",
    "Item": "Product",
    "Count": "Quantity",
    "PricePerUnit": "UnitPrice",
    "Date": "OrderDate"
})

df_csv["Source"] = "CSV"
# df_csv = df_csv[["OrderID", "Customer", "Product", "Quantity", "UnitPrice", "OrderDate", "Source"]]


df_excel=df_excel.rename(columns={ 
    "ID": "OrderID",
    "Name": "Customer",
    "Item": "Product",
    "Qty": "Quantity",
    "PricePerUnit": "UnitPrice",
    "Date": "OrderDate" })

df_excel["Source"] = "Excel"
# df_excel = df_excel[["OrderID", "Customer", "Product", "Quantity", "UnitPrice", "OrderDate", "Source"]]


df_json=df_json.rename(columns={
    "Order_ID": "OrderID",
    "Cust": "Customer",
    "Item_Name": "Product",
    "Quantity": "Quantity",
    "Price": "UnitPrice",
    "SaleDate": "OrderDate" })

df_json["Source"] = "JSON"
# df_json = df_json[["OrderID", "Customer", "Product", "Quantity", "UnitPrice", "OrderDate", "Source"]]


df_sql=df_sql.rename(columns={
    "OID": "OrderID",
    "CustName": "Customer",
    "Prod": "Product",
    "Qty": "Quantity",
    "Rate": "UnitPrice",
    "OD": "OrderDate" })

df_sql["Source"] = "SQL"
# df_sql = df_sql[["OrderID", "Customer", "Product", "Quantity", "UnitPrice", "OrderDate", "Source"]]


df_dict = pd.DataFrame({
    "OrderID": [501, 502],
    "Customer": ["Ivy", "Jack"],
    "Product": ["Tablet", "Laptop"],
    "Quantity": [2, 1],
    "UnitPrice": [650, 1250],
    "OrderDate": pd.to_datetime(["2024-05-02", "2024-05-03"]),
    "Source":["DICT","DICT"]
    })


# common_cols = ["OrderID", "Customer", "Product", "Quantity", "UnitPrice", "OrderDate", "Source"]

# df_excel = df_excel[common_cols]
# df_csv = df_csv[common_cols]
# df_json = df_json[common_cols]
# df_sql = df_sql[common_cols]
# df_dict = df_dict[common_cols]

# print("------------------------------------Colns after rename--------------------------------------")
# print(df_csv)
# print("---------------------------------------------------------------------------------------------")
# print(df_excel)
# print("---------------------------------------------------------------------------------------------")
# print(df_json)
# print("---------------------------------------------------------------------------------------------")
# print(df_sql)
# print("---------------------------------------------------------------------------------------------")

# Combining all sources together
df_combined=pd.concat([df_excel,df_csv,df_json,df_sql,df_dict],ignore_index=True)
# print("\n combined data are below \n")
# print(df_combined)

print("---------------------------------------Derived Colns-------------------------------------")

df_combined["TotalAmount"] = df_combined["Quantity"] * df_combined["UnitPrice"]
df_combined["Month"] = pd.to_datetime(df_combined["OrderDate"]).dt.to_period("M")

# print(df_combined)

# print("Excel Columns:", df_excel.columns.tolist())

print("-----------------------------------------Questions---------------------------------")

#1. How many records are there in total after merging all sources?
print("Total records after merge:", df_combined.shape[0])

print("------------------------------------------------------------------------")

#2. Are there any missing values in critical columns like Product, Quantity, or UnitPrice? How would you handle them?
print(df_combined[["Product", "Quantity", "UnitPrice"]].isnull().sum())

print("------------------------------------------------------------------------")

#3. Calculate the total revenue generated by each data source. How would you track the source of each row?
revenue_by_source = df_combined.groupby("Source")["TotalAmount"].sum().reset_index()
print(revenue_by_source)

print("------------------------------------------------------------------------")

#4. What is the total quantity sold for each product?
qty_per_product = df_combined.groupby("Product")["Quantity"].sum().reset_index().sort_values(by="Quantity", ascending=False)
print(qty_per_product)

print("------------------------------------------------------------------------")

#5. Which month had the highest total sales revenue?
revenue_by_month = df_combined.groupby("Month")["TotalAmount"].sum().reset_index()
best_month = revenue_by_month.sort_values(by="TotalAmount", ascending=False).head(1)
print(best_month)

print("------------------------------------------------------------------------")

#6. Who are the top 3 customers based on total purchase value?
top_customers = df_combined.groupby("Customer")["TotalAmount"].sum().reset_index().sort_values(by="TotalAmount", ascending=False).head(3)
print(top_customers)

print("------------------------------------------------------------------------")

#7. Which product generated the highest revenue and how many orders did it receive?
product_revenue = df_combined.groupby("Product")["TotalAmount"].sum().reset_index()
top_product = product_revenue.sort_values(by="TotalAmount", ascending=False).head(1)
print("Highest Revenue Product:")
print(top_product)

# Order count for that product
product_name = top_product.iloc[0]["Product"]
order_count = df_combined[df_combined["Product"] == product_name].shape[0]
print(f"Order Count for {product_name}:", order_count)

print("------------------------------------------------------------------------")

#8. What is the average order value (AOV) across all orders?
aov = df_combined["TotalAmount"].mean()
print("Average Order Value (AOV):", round(aov, 2))

print("------------------------------------------------------------------------")

#9. Identify the top 5 orders with the highest UnitPrice. Are these values realistic?
top_price_orders = df_combined.sort_values(by="UnitPrice", ascending=False).head(5)
print("Top 5 Highest UnitPrice Orders:")
print(top_price_orders[["OrderID", "Customer", "Product", "UnitPrice", "Quantity", "TotalAmount", "Source"]])

print("------------------------------------------------------------------------")

#10. Detect outliers in pricing using standard deviation method. List them and suggest actions.
# Step 1: Calculate mean and standard deviation
mean_price = df_combined["UnitPrice"].mean()
std_price = df_combined["UnitPrice"].std()

# Step 2: Set threshold for outliers (above 2 standard deviations)
threshold = mean_price + 2 * std_price

# Step 3: Filter out the outliers
outliers = df_combined[df_combined["UnitPrice"] > threshold]

# Display outliers
print("Outliers in UnitPrice:")
print(outliers)



























